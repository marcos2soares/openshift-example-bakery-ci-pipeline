apiVersion: v1
kind: Template
labels:
  template: sakuli-e2e-run-pod
metadata:
  annotations:
    description: Sakuli End-2-End testing client template (run as pod)
    iconClass: icon-beaker
    tags: consol, sakuli, e2e-testing, e2e-monitoring
    version: 1.1.0
  creationTimestamp: null
  name: sakuli-e2e-run-pod
### template parameter defined via `oc process -f this.yaml -p PARAMETER=value`
parameters:
## REQUIRED
- name: E2E_TEST_NAME
  description: The name for the E2E test suite.
  required: true
- name: BAKERY_BAKERY_URL
  required: true
- name: BAKERY_REPORT_URL
  required: true
## OPTIONAL
- description: 'Custom hostname for http service route.  Leave blank for default hostname, e.g.: <E2E_TEST_NAME-name>-<project>.<default-domain-suffix>'
  name: HOSTNAME_HTTP
- description: 'Sakuli End-2-End image (see `docker search sakuli`) or internal build docker image of openshift'
  name: IMAGE_NAME
  required: true
  value: sakuli-test-image:latest
### Configuration of OpenShift objects
objects:
### POD config (run one time)
- apiVersion: v1
  kind: Pod
  metadata:
    labels:
      application: ${E2E_TEST_NAME}
      housekeeping: delete
    name: ${E2E_TEST_NAME}
  spec:
    ### ensure that the pod won't start again
    restartPolicy: Never
    dnsPolicy: ClusterFirst
    terminationGracePeriodSeconds: 5
    containers:
    - name: ${E2E_TEST_NAME}
      image: ${IMAGE_NAME}
      imagePullPolicy: Always
      env:
        - name: BAKERY_REPORT_URL
          value: "${BAKERY_REPORT_URL}"
        - name: BAKERY_BAKERY_URL
          value: "${BAKERY_BAKERY_URL}"
        - name: JVM_HEAP_XMX_MAX
          value: '350'
        - name: TZ
          value: 'Europe/Berlin'
      args:
        ### make normal UI startup to connect via: oc rsh <pod-name> bash
#        - --tail-log
        ### run in chrome
        - run
        - /headless/sakuli/bakery/${E2E_TEST_NAME}
        # - -browser
        # - chrome
        ### set e.g. debug level
#        - -D
#        - log.level.sakuli=DEBUG
      ### checks that vnc server is up and running
      livenessProbe:
        tcpSocket:
          port: 5901
        initialDelaySeconds: 3
        timeoutSeconds: 5
      ### checks if http-vnc connection is working
      ### (removed to reduce the load on the openshift cluster
      #readinessProbe:
      #  httpGet:
      #    path: /
      #    port: 6901
      #    scheme: HTTP
      #  initialDelaySeconds: 1
      #  timeoutSeconds: 1
      resources:
        limits:
          cpu: 750m
          memory: 700Mi
### Service -> POD config
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Sakuli client vnc and http port
    labels:
      application: ${E2E_TEST_NAME}
    name: ${E2E_TEST_NAME}-ser
  spec:
    ports:
    - name: http-port-tcp
      protocol: TCP
      port: 6901
      targetPort: 6901
    - name: vnc-port-tcp
      protocol: TCP
      port: 5901
      targetPort: 5901
    selector:
      application: ${E2E_TEST_NAME}
### Route -> Service config
- apiVersion: v1
  id: ${E2E_TEST_NAME}
  kind: Route
  metadata:
    annotations:
      description: Route for vnc's http service.
    labels:
      application: ${E2E_TEST_NAME}
      router: public
    name: ${E2E_TEST_NAME}
  spec:
    host: ${HOSTNAME_HTTP}
    to:
      name: ${E2E_TEST_NAME}-ser
    port:
      targetPort: http-port-tcp
      
